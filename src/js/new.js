// ?.
// Оператор опциональной последовательности (Optional chaining)
// Оператор ?. позволяет получить значение свойства, находящегося на любом уровне вложенности в цепочке связанных между собой объектов, без необходимости проверять каждое из промежуточных свойств в ней на существование.
// ?. работает подобно оператору ., за исключением того, что не выбрасывает исключение, если объект, к свойству или методу которого идёт обращение, равен null или undefined. В этих случаях он возвращает undefined.
// Таким образом, мы получаем более короткий и понятный код при обращении к вложенным по цепочке свойствам объекта, когда есть вероятность, что какое-то из них отсутствует.
// ============================================================
// Оператор опціональної послідовності (Optional chaining)
// Оператор?. дозволяє отримати значення властивості, що знаходиться на будь-якому рівні вкладеності в ланцюжку пов'язаних між собою об'єктів, без необхідності перевіряти кожну з проміжних властивостей у ній на існування.
//?. працює подібно до оператора ., за винятком того, що не викидає виняток, якщо об'єкт, до властивості або методу якого йде звернення, дорівнює null або undefined. У цих випадках він повертає невизначений.
// Таким чином, ми отримуємо більш короткий і зрозумілий код при зверненні до вкладених по ланцюжку властивостей об'єкта, коли є ймовірність, що якесь із них відсутнє.

const adventurer = {
  name: 'Alice',
  cat: {
    name: 'Dinah',
  },
  getName() {
    console.log(this.name);
  },
};

const dogName = adventurer.dog?.name;
console.log(dogName);
// expected output: undefined

console.log(adventurer.someNonExistentMethod?.());
// expected output: undefined

//////////////////////////////////

let customer = {
  name: 'Carl',
  details: {
    age: 82,
    location: 'Paradise Falls', // точный адрес неизвестен
  },
};
let customerCity = customer.details?.address?.city;

// … это также работает с вызовами функций
let birthYear = customer.details?.getBirth?.();

///////////////////////////////////////////////////////////

// ??
// Оператор нулевого слияния (Nullish coalescing operator)
// Оператор ?? это логический оператор, который возвращает значение правого операнда когда значение левого операнда равно null или undefined, в противном случае будет возвращено значение левого операнда.
// В отличие от логического ИЛИ (||), левая часть оператора вычисляется и возвращается даже если его результат после приведения к логическому типу оказывается ложным, но не является null или undefined. Другими словами, если вы используете || чтобы установить значение по умолчанию, вы можете столкнуться с неожиданным поведением если считаете некоторые ложные значения пригодными для использования (например, "" или 0).
// ========================================================
// Оператор нульового злиття (Nullish coalescing operator)
// Оператор ?? це логічний оператор, який повертає значення правого операнда коли значення лівого операнда дорівнює null або undefined, інакше буде повернено значення лівого операнда.
// На відміну від логічного АБО (||), ліва частина оператора обчислюється і повертається навіть якщо його результат після приведення до логічного типу виявляється помилковим, але не є null або undefined. Іншими словами, якщо ви використовуєте || щоб встановити значення за замовчуванням, ви можете зіткнутися з несподіваною поведінкою, якщо вважаєте деякі помилкові значення придатними для використання (наприклад, "" або 0).

const foo = null ?? 'default string';
console.log(foo);
// expected output: "default string"

const baz = 0 ?? 42;
console.log(baz);
// expected output: 0

////////////////////////////////

const nullValue = null;
const emptyText = ''; // falsy
const someNumber = 42;

const valA = nullValue ?? 'default for A';
const valB = emptyText ?? 'default for B';
const valC = someNumber ?? 0;

console.log(valA); // "default for A"
console.log(valB); // "" (так как пустая строка не null или undefined)
console.log(valC); // 42

/////////////////////////////////////////////////////////////////////////////////////

// ??=
// Оператор логического нулевого присвоения (Logical nullish assignment)
// Оператор (x ??= y) присваивает новое значение х, только если x имеет нулевое значение (равно null или undefined)
// if (x === null || x === undefined) { x = y };
// x ?? (x = y);
// ========================================================
// Оператор логічного нульового присвоєння (Logical nullish assignment)
// Оператор (x ??= y) надає нове значення х, тільки якщо x має нульове значення (дорівнює null або undefined)
// if (x === null || x === undefined) { x = y };
// x ?? (x = y);

const a = { duration: 50 };

a.duration ??= 10;
console.log(a.duration);
// expected output: 50

a.speed ??= 25;
console.log(a.speed);
// expected output: 25

///////////////////////////////////

function config(options) {
  options.duration ??= 100;
  options.speed ??= 25;
  return options;
}

config({ duration: 125 }); // { duration: 125, speed: 25 }
config({}); // { duration: 100, speed: 25 }

///////////////////////////////////////////////////////////////////////////////////

// ||=
// Оператор присвоения с логическим ИЛИ (Logical OR assignment)
// Оператор (x ||= y) присваивает новое значение х, только если x ложно (x || (x = y))
// ========================================================
// Оператор присвоєння з логічним АБО (Logical OR assignment)
// Оператор (x ||= y) надає нове значення х, якщо x хибно (x || (x = y))

const lesson = { duration: 50, title: '' };

lesson.duration ||= 10;
console.log(lesson.duration);
// expected output: 50

lesson.title ||= 'title is empty.';
console.log(lesson.title);
// expected output: "title is empty"

///////////////////////////

document.getElementById('lyrics').textContent ||= 'No lyrics.';

/////////////////////////////////////////////////////////////////////////////////

// &&=
// Оператор присвоения с логическим И (Logical AND assignment)
// Оператор (x &&= y) присваивает новое значение х, только если x истинно (x && (x = y))
//==============================================================
// Оператор присвоєння з логічним І (Logical AND assignment)
// Оператор (x &&= y) надає нове значення х, якщо x істинно (x && (x = y))

let c = 1;
let d = 0;

c &&= 2;
console.log(c);
// expected output: 2

d &&= 2;
console.log(d);
// expected output: 0

///////////////////////////////

let x = 0;
let y = 1;

x &&= 0; // 0
x &&= 1; // 0
y &&= 1; // 1
y &&= 0; // 0

/////////////////////////////////////////////////////
